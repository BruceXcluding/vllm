#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0)
#loc10 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:4)
#mma = #triton_gpu.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [1, 8], instrShape = [16, 16], isTransposed = false}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 16, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 16, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx942", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @fused_moe_persistent_kernelV2(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg4: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg5: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg6: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg9: i32 loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0)) attributes {noinline = false} {
    %cst = arith.constant dense<128> : tensor<32x128xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<128> : tensor<128x128xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<2> : tensor<32x1xi32, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c304_i32 = arith.constant 304 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<32x128xf16, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128x128xf16, #blocked1> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x128xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg9, %c31_i32 : i32 loc(#loc75)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc76)
    %3 = arith.addi %arg7, %c127_i32 : i32 loc(#loc77)
    %4 = arith.divsi %3, %c128_i32 : i32 loc(#loc78)
    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %6 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc7)
    %7 = tt.load %arg6 : !tt.ptr<i32> loc(#loc8)
    %8 = arith.subi %0, %c304_i32 : i32 loc(#loc9)
    %9:2 = scf.while (%arg15 = %c-1_i32, %arg16 = %8, %arg17 = %c0_i32) : (i32, i32, i32) -> (i32, i32) {
      %32 = arith.muli %arg17, %c32_i32 : i32 loc(#loc11)
      %33 = arith.cmpi slt, %32, %7 : i32 loc(#loc12)
      scf.condition(%33) %arg15, %arg16 : i32, i32 loc(#loc12)
    } do {
    ^bb0(%arg15: i32 loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:4), %arg16: i32 loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:4)):
      %32 = arith.addi %arg15, %c1_i32 : i32 loc(#loc13)
      %33 = arith.addi %arg16, %c304_i32 : i32 loc(#loc14)
      %34 = arith.divsi %33, %4 : i32 loc(#loc15)
      %35 = arith.subi %2, %34 : i32 loc(#loc16)
      %36 = arith.minsi %35, %c1_i32 : i32 loc(#loc17)
      %37 = arith.remsi %33, %4 : i32 loc(#loc18)
      %38 = arith.remsi %37, %36 : i32 loc(#loc19)
      %39 = arith.addi %34, %38 : i32 loc(#loc20)
      scf.yield %32, %33, %39 : i32, i32, i32 loc(#loc21)
    } loc(#loc10)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
    %12 = tt.splat %arg4 : !tt.ptr<i32> -> tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc23)
    %13 = tt.splat %arg4 : !tt.ptr<i32> -> tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
    %14 = tt.splat %arg10 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
    %15 = tt.splat %arg10 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc24)
    %16 = tt.splat %arg11 : i32 -> tensor<32x1xi32, #blocked> loc(#loc25)
    %17 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc26)
    %18 = tt.expand_dims %17 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc26)
    %19 = tt.broadcast %18 : tensor<1x128xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc27)
    %20 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<32x128x!tt.ptr<f16>, #blocked> loc(#loc28)
    %21 = tt.splat %arg7 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %22 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc30)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc30)
    %24 = tt.splat %arg13 : i32 -> tensor<1x128xi32, #blocked1> loc(#loc31)
    %25 = tt.broadcast %23 : tensor<128x1xi32, #blocked1> -> tensor<128x128xi32, #blocked1> loc(#loc32)
    %26 = arith.addi %arg8, %c127_i32 : i32 loc(#loc79)
    %27 = arith.divsi %26, %c128_i32 : i32 loc(#loc80)
    %28 = tt.splat %arg14 : i32 -> tensor<32x1xi32, #mma> loc(#loc34)
    %29 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<32x1x!tt.ptr<f16>, #mma> loc(#loc35)
    %30 = tt.splat %arg7 : i32 -> tensor<1x128xi32, #mma> loc(#loc36)
    %31 = scf.for %arg15 = %c0_i32 to %9#0 step %c1_i32 iter_args(%arg16 = %0) -> (i32)  : i32 {
      %32 = arith.divsi %arg16, %4 : i32 loc(#loc38)
      %33 = arith.remsi %arg16, %4 : i32 loc(#loc39)
      %34 = arith.muli %32, %c32_i32 : i32 loc(#loc40)
      %35 = tt.splat %34 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc41)
      %36 = tt.splat %34 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
      %37 = arith.addi %35, %10 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc41)
      %38 = arith.addi %36, %11 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
      %39 = tt.addptr %12, %37 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc23)
      %40 = tt.addptr %13, %38 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
      %41 = tt.load %39 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc42)
      %42 = tt.load %40 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc42)
      %43 = arith.cmpi slt, %41, %14 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
      %44 = arith.cmpi slt, %42, %15 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc24)
      %45 = tt.expand_dims %41 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc43)
      %46 = tt.expand_dims %42 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc43)
      %47 = arith.divsi %46, %cst_1 : tensor<32x1xi32, #blocked> loc(#loc44)
      %48 = arith.muli %47, %16 : tensor<32x1xi32, #blocked> loc(#loc25)
      %49 = tt.broadcast %48 : tensor<32x1xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc27)
      %50 = arith.addi %49, %19 : tensor<32x128xi32, #blocked> loc(#loc27)
      %51 = tt.addptr %20, %50 : tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc28)
      %52 = arith.muli %33, %c128_i32 : i32 loc(#loc45)
      %53 = tt.splat %52 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc46)
      %54 = tt.splat %52 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc46)
      %55 = arith.addi %53, %5 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc46)
      %56 = arith.addi %54, %6 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc46)
      %57 = arith.remsi %55, %21 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %58 = tt.addptr %arg5, %32 : !tt.ptr<i32>, i32 loc(#loc47)
      %59 = tt.load %58 : !tt.ptr<i32> loc(#loc48)
      %60 = arith.muli %59, %arg12 : i32 loc(#loc49)
      %61 = tt.addptr %arg1, %60 : !tt.ptr<f16>, i32 loc(#loc50)
      %62 = tt.expand_dims %57 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc51)
      %63 = arith.muli %62, %24 : tensor<1x128xi32, #blocked1> loc(#loc31)
      %64 = tt.broadcast %63 : tensor<1x128xi32, #blocked1> -> tensor<128x128xi32, #blocked1> loc(#loc32)
      %65 = arith.addi %25, %64 : tensor<128x128xi32, #blocked1> loc(#loc32)
      %66 = tt.splat %61 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc52)
      %67 = tt.addptr %66, %65 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc52)
      %68 = tt.expand_dims %44 {axis = 1 : i32} : tensor<32xi1, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi1, #blocked> loc(#loc53)
      %69 = tt.broadcast %68 : tensor<32x1xi1, #blocked> -> tensor<32x128xi1, #blocked> loc(#loc54)
      %70 = tt.splat %arg8 : i32 -> tensor<1x128xi32, #blocked> loc(#loc55)
      %71 = arith.cmpi slt, %18, %70 : tensor<1x128xi32, #blocked> loc(#loc55)
      %72 = tt.broadcast %71 : tensor<1x128xi1, #blocked> -> tensor<32x128xi1, #blocked> loc(#loc54)
      %73 = arith.andi %69, %72 : tensor<32x128xi1, #blocked> loc(#loc54)
      %74 = tt.load %51, %73, %cst_2 : tensor<32x128x!tt.ptr<f16>, #blocked> loc(#loc56)
      %75 = triton_gpu.local_alloc %74 : (tensor<32x128xf16, #blocked>) -> !tt.memdesc<32x128xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc56)
      %76 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc57)
      %77 = arith.cmpi slt, %23, %76 : tensor<128x1xi32, #blocked1> loc(#loc57)
      %78 = tt.broadcast %77 : tensor<128x1xi1, #blocked1> -> tensor<128x128xi1, #blocked1> loc(#loc58)
      %79 = tt.load %67, %78, %cst_3 : tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc58)
      %80 = triton_gpu.local_alloc %79 : (tensor<128x128xf16, #blocked1>) -> !tt.memdesc<128x128xf16, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc58)
      %81 = tt.addptr %51, %cst : tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc59)
      %82 = tt.addptr %67, %cst_0 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc60)
      %83 = arith.subi %27, %c1_i32 : i32 loc(#loc61)
      %84:3 = scf.for %arg17 = %c0_i32 to %83 step %c1_i32 iter_args(%arg18 = %cst_4, %arg19 = %81, %arg20 = %82) -> (tensor<32x128xf32, #mma>, tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<128x128x!tt.ptr<f16>, #blocked1>)  : i32 {
        %101 = arith.addi %arg17, %c1_i32 : i32 loc(#loc61)
        %102 = arith.muli %101, %c128_i32 : i32 loc(#loc62)
        %103 = arith.subi %arg8, %102 : i32 loc(#loc63)
        %104 = tt.splat %103 : i32 -> tensor<1x128xi32, #blocked> loc(#loc55)
        %105 = arith.cmpi slt, %18, %104 : tensor<1x128xi32, #blocked> loc(#loc55)
        %106 = tt.broadcast %105 : tensor<1x128xi1, #blocked> -> tensor<32x128xi1, #blocked> loc(#loc54)
        %107 = arith.andi %69, %106 : tensor<32x128xi1, #blocked> loc(#loc54)
        %108 = tt.load %arg19, %107, %cst_2 : tensor<32x128x!tt.ptr<f16>, #blocked> loc(#loc56)
        %109 = tt.splat %103 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc57)
        %110 = arith.cmpi slt, %23, %109 : tensor<128x1xi32, #blocked1> loc(#loc57)
        %111 = tt.broadcast %110 : tensor<128x1xi1, #blocked1> -> tensor<128x128xi1, #blocked1> loc(#loc58)
        %112 = tt.load %arg20, %111, %cst_3 : tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc58)
        %113 = triton_gpu.local_load %75 : !tt.memdesc<32x128xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc56)
        %114 = triton_gpu.local_load %80 : !tt.memdesc<128x128xf16, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc58)
        %115 = tt.dot %113, %114, %arg18 : tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x128xf32, #mma> loc(#loc64)
        %116 = tt.addptr %arg19, %cst : tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc59)
        %117 = tt.addptr %arg20, %cst_0 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc60)
        triton_gpu.local_store %108, %75 : tensor<32x128xf16, #blocked> -> !tt.memdesc<32x128xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc56)
        triton_gpu.local_store %112, %80 : tensor<128x128xf16, #blocked1> -> !tt.memdesc<128x128xf16, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc58)
        scf.yield %115, %116, %117 : tensor<32x128xf32, #mma>, tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc65)
      } loc(#loc61)
      %85 = triton_gpu.local_load %75 : !tt.memdesc<32x128xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc56)
      %86 = triton_gpu.local_load %80 : !tt.memdesc<128x128xf16, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc58)
      %87 = tt.dot %85, %86, %84#0 : tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x128xf32, #mma> loc(#loc64)
      %88 = arith.truncf %87 : tensor<32x128xf32, #mma> to tensor<32x128xf16, #mma> loc(#loc66)
      %89 = arith.muli %28, %45 : tensor<32x1xi32, #mma> loc(#loc34)
      %90 = tt.addptr %29, %89 : tensor<32x1x!tt.ptr<f16>, #mma>, tensor<32x1xi32, #mma> loc(#loc35)
      %91 = tt.expand_dims %56 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x128xi32, #mma> loc(#loc67)
      %92 = tt.broadcast %90 : tensor<32x1x!tt.ptr<f16>, #mma> -> tensor<32x128x!tt.ptr<f16>, #mma> loc(#loc68)
      %93 = tt.broadcast %91 : tensor<1x128xi32, #mma> -> tensor<32x128xi32, #mma> loc(#loc68)
      %94 = tt.addptr %92, %93 : tensor<32x128x!tt.ptr<f16>, #mma>, tensor<32x128xi32, #mma> loc(#loc68)
      %95 = tt.expand_dims %43 {axis = 1 : i32} : tensor<32xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi1, #mma> loc(#loc69)
      %96 = arith.cmpi slt, %91, %30 : tensor<1x128xi32, #mma> loc(#loc36)
      %97 = tt.broadcast %95 : tensor<32x1xi1, #mma> -> tensor<32x128xi1, #mma> loc(#loc70)
      %98 = tt.broadcast %96 : tensor<1x128xi1, #mma> -> tensor<32x128xi1, #mma> loc(#loc70)
      %99 = arith.andi %97, %98 : tensor<32x128xi1, #mma> loc(#loc70)
      tt.store %94, %88, %99 : tensor<32x128x!tt.ptr<f16>, #mma> loc(#loc71)
      %100 = arith.addi %arg16, %c304_i32 : i32 loc(#loc72)
      scf.yield %100 : i32 loc(#loc73)
    } loc(#loc37)
    tt.return loc(#loc74)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":411:30)
#loc3 = loc("/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":412:28)
#loc5 = loc("/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":413:27)
#loc7 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":417:26)
#loc8 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":422:37)
#loc9 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":427:27)
#loc11 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:18)
#loc12 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:33)
#loc13 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":430:27)
#loc14 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":431:20)
#loc15 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":432:31)
#loc16 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":434:39)
#loc17 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":434:52)
#loc18 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":435:43)
#loc19 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":435:63)
#loc20 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":435:31)
#loc21 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":435:8)
#loc22 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":449:60)
#loc23 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":450:52)
#loc24 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":451:34)
#loc25 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":453:57)
#loc26 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":454:19)
#loc27 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":454:12)
#loc28 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":453:26)
#loc29 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":456:72)
#loc30 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:20)
#loc31 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:62)
#loc32 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:43)
#loc33 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":467:37)
#loc34 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":503:38)
#loc35 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":503:26)
#loc36 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":505:59)
#loc37 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":438:22)
#loc38 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":440:31)
#loc39 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":441:30)
#loc40 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":449:32)
#loc41 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":449:47)
#loc42 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":450:29)
#loc43 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":453:37)
#loc44 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":453:49)
#loc45 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":456:27)
#loc46 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":456:42)
#loc47 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":457:47)
#loc48 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":457:30)
#loc49 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":458:40)
#loc50 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":458:26)
#loc51 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:51)
#loc52 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:13)
#loc53 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":472:32)
#loc54 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":473:21)
#loc55 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":473:39)
#loc56 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":471:16)
#loc57 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":478:39)
#loc58 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":477:16)
#loc59 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":487:22)
#loc60 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":488:22)
#loc61 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":467:26)
#loc62 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":473:47)
#loc63 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":473:43)
#loc64 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":485:41)
#loc65 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":488:12)
#loc66 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":499:41)
#loc67 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":504:36)
#loc68 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":504:16)
#loc69 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":505:28)
#loc70 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":505:40)
#loc71 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":506:25)
#loc72 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":509:19)
#loc73 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":509:8)
#loc74 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":438:4)
#loc75 = loc(callsite(#loc3 at #loc4))
#loc76 = loc(callsite(#loc5 at #loc4))
#loc77 = loc(callsite(#loc3 at #loc6))
#loc78 = loc(callsite(#loc5 at #loc6))
#loc79 = loc(callsite(#loc3 at #loc33))
#loc80 = loc(callsite(#loc5 at #loc33))
