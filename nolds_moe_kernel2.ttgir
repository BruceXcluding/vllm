#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0)
#loc10 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:4)
#mma = #triton_gpu.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [1, 8], instrShape = [16, 16], isTransposed = false}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 16, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 16, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx942", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @fused_moe_persistent_kernelV2(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg4: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg5: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg6: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg9: i32 loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":344:0)) attributes {noinline = false} {
    %cst = arith.constant dense<128> : tensor<32x128xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<128> : tensor<128x128xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<2> : tensor<32x1xi32, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c80_i32 = arith.constant 80 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<32x128xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg9, %c31_i32 : i32 loc(#loc69)
    %2 = arith.divsi %1, %c32_i32 : i32 loc(#loc70)
    %3 = arith.addi %arg7, %c127_i32 : i32 loc(#loc71)
    %4 = arith.divsi %3, %c128_i32 : i32 loc(#loc72)
    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %6 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc7)
    %7 = tt.load %arg6 : !tt.ptr<i32> loc(#loc8)
    %8 = arith.subi %0, %c80_i32 : i32 loc(#loc9)
    %9:2 = scf.while (%arg15 = %c-1_i32, %arg16 = %8, %arg17 = %c0_i32) : (i32, i32, i32) -> (i32, i32) {
      %31 = arith.muli %arg17, %c32_i32 : i32 loc(#loc11)
      %32 = arith.cmpi slt, %31, %7 : i32 loc(#loc12)
      scf.condition(%32) %arg15, %arg16 : i32, i32 loc(#loc12)
    } do {
    ^bb0(%arg15: i32 loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:4), %arg16: i32 loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:4)):
      %31 = arith.addi %arg15, %c1_i32 : i32 loc(#loc13)
      %32 = arith.addi %arg16, %c80_i32 : i32 loc(#loc14)
      %33 = arith.divsi %32, %4 : i32 loc(#loc15)
      %34 = arith.subi %2, %33 : i32 loc(#loc16)
      %35 = arith.minsi %34, %c1_i32 : i32 loc(#loc17)
      %36 = arith.remsi %32, %4 : i32 loc(#loc18)
      %37 = arith.remsi %36, %35 : i32 loc(#loc19)
      %38 = arith.addi %33, %37 : i32 loc(#loc20)
      scf.yield %31, %32, %38 : i32, i32, i32 loc(#loc21)
    } loc(#loc10)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
    %12 = tt.splat %arg4 : !tt.ptr<i32> -> tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc23)
    %13 = tt.splat %arg4 : !tt.ptr<i32> -> tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
    %14 = tt.splat %arg10 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
    %15 = tt.splat %arg11 : i32 -> tensor<32x1xi32, #blocked> loc(#loc25)
    %16 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc26)
    %17 = tt.expand_dims %16 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc26)
    %18 = tt.broadcast %17 : tensor<1x128xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc27)
    %19 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<32x128x!tt.ptr<f16>, #blocked> loc(#loc28)
    %20 = tt.splat %arg7 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
    %21 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc30)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc30)
    %23 = tt.splat %arg13 : i32 -> tensor<1x128xi32, #blocked1> loc(#loc31)
    %24 = tt.broadcast %22 : tensor<128x1xi32, #blocked1> -> tensor<128x128xi32, #blocked1> loc(#loc32)
    %25 = arith.addi %arg8, %c127_i32 : i32 loc(#loc73)
    %26 = arith.divsi %25, %c128_i32 : i32 loc(#loc74)
    %27 = tt.splat %arg14 : i32 -> tensor<32x1xi32, #mma> loc(#loc34)
    %28 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<32x1x!tt.ptr<f16>, #mma> loc(#loc35)
    %29 = tt.splat %arg7 : i32 -> tensor<1x128xi32, #mma> loc(#loc36)
    %30 = scf.for %arg15 = %c0_i32 to %9#0 step %c1_i32 iter_args(%arg16 = %0) -> (i32)  : i32 {
      %31 = arith.divsi %arg16, %4 : i32 loc(#loc38)
      %32 = arith.remsi %arg16, %4 : i32 loc(#loc39)
      %33 = arith.muli %31, %c32_i32 : i32 loc(#loc40)
      %34 = tt.splat %33 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc41)
      %35 = tt.splat %33 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
      %36 = arith.addi %34, %10 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc41)
      %37 = arith.addi %35, %11 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
      %38 = tt.addptr %12, %36 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc23)
      %39 = tt.addptr %13, %37 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc23)
      %40 = tt.load %38 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc42)
      %41 = tt.load %39 : tensor<32x!tt.ptr<i32>, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc42)
      %42 = arith.cmpi slt, %40, %14 : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc24)
      %43 = tt.expand_dims %40 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc43)
      %44 = tt.expand_dims %41 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc43)
      %45 = arith.divsi %44, %cst_1 : tensor<32x1xi32, #blocked> loc(#loc44)
      %46 = arith.muli %45, %15 : tensor<32x1xi32, #blocked> loc(#loc25)
      %47 = tt.broadcast %46 : tensor<32x1xi32, #blocked> -> tensor<32x128xi32, #blocked> loc(#loc27)
      %48 = arith.addi %47, %18 : tensor<32x128xi32, #blocked> loc(#loc27)
      %49 = tt.addptr %19, %48 : tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc28)
      %50 = arith.muli %32, %c128_i32 : i32 loc(#loc45)
      %51 = tt.splat %50 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc46)
      %52 = tt.splat %50 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc46)
      %53 = arith.addi %51, %5 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc46)
      %54 = arith.addi %52, %6 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc46)
      %55 = arith.remsi %53, %20 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc29)
      %56 = tt.addptr %arg5, %31 : !tt.ptr<i32>, i32 loc(#loc47)
      %57 = tt.load %56 : !tt.ptr<i32> loc(#loc48)
      %58 = arith.muli %57, %arg12 : i32 loc(#loc49)
      %59 = tt.addptr %arg1, %58 : !tt.ptr<f16>, i32 loc(#loc50)
      %60 = tt.expand_dims %55 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc51)
      %61 = arith.muli %60, %23 : tensor<1x128xi32, #blocked1> loc(#loc31)
      %62 = tt.broadcast %61 : tensor<1x128xi32, #blocked1> -> tensor<128x128xi32, #blocked1> loc(#loc32)
      %63 = arith.addi %24, %62 : tensor<128x128xi32, #blocked1> loc(#loc32)
      %64 = tt.splat %59 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc52)
      %65 = tt.addptr %64, %63 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc52)
      %66 = tt.load %49 : tensor<32x128x!tt.ptr<f16>, #blocked> loc(#loc53)
      %67 = triton_gpu.local_alloc %66 : (tensor<32x128xf16, #blocked>) -> !tt.memdesc<32x128xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc53)
      %68 = tt.load %65 : tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc54)
      %70 = tt.addptr %49, %cst : tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc55)
      %71 = tt.addptr %65, %cst_0 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc56)
      %72 = arith.subi %26, %c1_i32 : i32 loc(#loc57)
      %73:4 = scf.for %arg17 = %c0_i32 to %72 step %c1_i32 iter_args(%arg18 = %cst_2, %arg19 = %70, %arg20 = %71, %arg21 = %68) -> (tensor<32x128xf32, #mma>, tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xf16, #blocked1>)  : i32 {
        %90 = tt.load %arg19 : tensor<32x128x!tt.ptr<f16>, #blocked> loc(#loc53)
        %91 = tt.load %arg20 : tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc54)
        %92 = triton_gpu.local_load %67 : !tt.memdesc<32x128xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc53)
        %93 = triton_gpu.convert_layout %arg21 : tensor<128x128xf16, #blocked1> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc58)
        %94 = tt.dot %92, %93, %arg18 : tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x128xf32, #mma> loc(#loc58)
        %95 = tt.addptr %arg19, %cst : tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<32x128xi32, #blocked> loc(#loc55)
        %96 = tt.addptr %arg20, %cst_0 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi32, #blocked1> loc(#loc56)
        triton_gpu.local_store %90, %67 : tensor<32x128xf16, #blocked> -> !tt.memdesc<32x128xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc53)
        scf.yield %94, %95, %96, %91 : tensor<32x128xf32, #mma>, tensor<32x128x!tt.ptr<f16>, #blocked>, tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xf16, #blocked1> loc(#loc59)
      } loc(#loc57)
      %74 = triton_gpu.local_load %67 : !tt.memdesc<32x128xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc53)
      %75 = triton_gpu.convert_layout %73#3 : tensor<128x128xf16, #blocked1> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc58)
      %76 = tt.dot %74, %75, %73#0 : tensor<32x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x128xf32, #mma> loc(#loc58)
      %77 = arith.truncf %76 : tensor<32x128xf32, #mma> to tensor<32x128xf16, #mma> loc(#loc60)
      %78 = arith.muli %27, %43 : tensor<32x1xi32, #mma> loc(#loc34)
      %79 = tt.addptr %28, %78 : tensor<32x1x!tt.ptr<f16>, #mma>, tensor<32x1xi32, #mma> loc(#loc35)
      %80 = tt.expand_dims %54 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x128xi32, #mma> loc(#loc61)
      %81 = tt.broadcast %79 : tensor<32x1x!tt.ptr<f16>, #mma> -> tensor<32x128x!tt.ptr<f16>, #mma> loc(#loc62)
      %82 = tt.broadcast %80 : tensor<1x128xi32, #mma> -> tensor<32x128xi32, #mma> loc(#loc62)
      %83 = tt.addptr %81, %82 : tensor<32x128x!tt.ptr<f16>, #mma>, tensor<32x128xi32, #mma> loc(#loc62)
      %84 = tt.expand_dims %42 {axis = 1 : i32} : tensor<32xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi1, #mma> loc(#loc63)
      %85 = arith.cmpi slt, %80, %29 : tensor<1x128xi32, #mma> loc(#loc36)
      %86 = tt.broadcast %84 : tensor<32x1xi1, #mma> -> tensor<32x128xi1, #mma> loc(#loc64)
      %87 = tt.broadcast %85 : tensor<1x128xi1, #mma> -> tensor<32x128xi1, #mma> loc(#loc64)
      %88 = arith.andi %86, %87 : tensor<32x128xi1, #mma> loc(#loc64)
      tt.store %83, %77, %88 : tensor<32x128x!tt.ptr<f16>, #mma> loc(#loc65)
      %89 = arith.addi %arg16, %c80_i32 : i32 loc(#loc66)
      scf.yield %89 : i32 loc(#loc67)
    } loc(#loc37)
    tt.return loc(#loc68)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":411:30)
#loc3 = loc("/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":412:28)
#loc5 = loc("/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":413:27)
#loc7 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":417:26)
#loc8 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":422:37)
#loc9 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":427:27)
#loc11 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:18)
#loc12 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":429:33)
#loc13 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":430:27)
#loc14 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":431:20)
#loc15 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":432:31)
#loc16 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":434:39)
#loc17 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":434:52)
#loc18 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":435:43)
#loc19 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":435:63)
#loc20 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":435:31)
#loc21 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":435:8)
#loc22 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":449:60)
#loc23 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":450:52)
#loc24 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":451:34)
#loc25 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":453:57)
#loc26 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":454:19)
#loc27 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":454:12)
#loc28 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":453:26)
#loc29 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":456:72)
#loc30 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:20)
#loc31 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:62)
#loc32 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:43)
#loc33 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":467:37)
#loc34 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":498:38)
#loc35 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":498:26)
#loc36 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":500:59)
#loc37 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":438:22)
#loc38 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":440:31)
#loc39 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":441:30)
#loc40 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":449:32)
#loc41 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":449:47)
#loc42 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":450:29)
#loc43 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":453:37)
#loc44 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":453:49)
#loc45 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":456:27)
#loc46 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":456:42)
#loc47 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":457:47)
#loc48 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":457:30)
#loc49 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":458:40)
#loc50 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":458:26)
#loc51 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:51)
#loc52 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":459:13)
#loc53 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":471:16)
#loc54 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":474:16)
#loc55 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":482:22)
#loc56 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":483:22)
#loc57 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":467:26)
#loc58 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":480:41)
#loc59 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":483:12)
#loc60 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":494:41)
#loc61 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":499:36)
#loc62 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":499:16)
#loc63 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":500:28)
#loc64 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":500:40)
#loc65 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":501:25)
#loc66 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":504:19)
#loc67 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":504:8)
#loc68 = loc("/rocm/vllm/vllm/model_executor/layers/fused_moe/fused_moe.py":438:4)
#loc69 = loc(callsite(#loc3 at #loc4))
#loc70 = loc(callsite(#loc5 at #loc4))
#loc71 = loc(callsite(#loc3 at #loc6))
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc3 at #loc33))
#loc74 = loc(callsite(#loc5 at #loc33))
